/******************************************************************************
 * Copyright (c) 2018-2019, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_user_state_module Example for User-Defined State Modules

<div align="right">
    [\link mi_neuray_example_derivatives Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
\if MDL_BIN_RELEASE
    [\link mi_neuray_example_distilling Next\endlink]
\else
    [\link mi_neuray_example_traversal Next\endlink]
\endif
</div>

This example shows how to use a custom implementation of the state module.
It enables you to adapt the generated code to your renderer, thus avoiding costly copies of your renderer state to the MDL SDK API state.

\section example_user_state_module_new New Topics

  - User-defined state modules

\section example_user_state_module_descr Detailed Description

<dl>
<dt><b>User-defined state modules</b></dt>
<dd><br>
Usually, when you use code generated by the MDL SDK, you first setup the MDL material state structure #mi::neuraylib::Shading_state_material by copying data from your own renderer state.
But the duplicated state not only takes up stack space, it also causes several memory writes.
By letting the generated code know, how to access your renderer state directly, this superfluous marshalling can be avoided.
You can do this by specifying your own implementation of the state module.

To use a custom state module implementation, you have to provide LLVM-3.4-compatible bitcode data containing the state accessor functions as \c "llvm_state_module" binary option to the CUDA PTX, LLVM IR, or native backend via #mi::neuraylib::IMdl_backend::set_option_binary().
\note The data will be copied, so you don't have to keep the data alive.
    The module will not be checked for errors at this time, yet.

The required accessor functions mainly represent the functions in section 19 "Renderer state" of the MDL specification.
The functions are expected to be implemented in C++ and must be placed in a \c "state" namespace.
They use special types like \c "vfloat3" defined in \c "mdl_user_modules.h" which will be translated to LLVM vector types.
The functions will be treated as side-effect-free, so function calls may be reordered or optimized away and their results may be reused.

All functions get a pointer to the shading state context as first parameter.
This pointer will receive the "state" the renderer provided to the functions generated by the MDL backend.
Currently, there are two contexts: Environment state functions expect a const pointer to an (opaque) \c "State_environment" structure and everything else expects a const pointer to an (opaque) \c "State_core" structure.
In your implementation, you can just cast the context pointers to your own state types.

\note It is not allowed to define those structures to avoid the casts in the source code, as these opaque structure types are required for linking with the generated code.

State functions with an \c "index" parameter get a const pointer to an (opaque) \c "Exception_state" structure as second parameter, because your implementation may want to handle out-of-bounds exceptions.
But before such functions are called, the \c "index" argument will already be bounds-checked against the \c "num_texture_spaces" backend option as all indices refer to texture spaces.

For the environment context, only the "direction()" function must be implemented.

In addition to the functions described in the MDL specification, some special functions are required for the core context:

\code
    // Special function required by the init function of distribution functions for updating
    // the normal field in the state.
    void set_normal(State_core *state_context, vfloat3 new_normal);

    // Get the texture results table, required by the distribution functions.
    // Init will write the texture results, while sample, evaluate and PDF will only read it.
    float4 *get_texture_results(State_core *state_context);

    // Get the read-only data segment.
    const char *get_ro_data_segment(State_core const *state_context);
\endcode

The \c "user_modules" examples subfolder contains a reference C++ implementation corresponding to the current implementation in the MDL SDK and a precompiled bitcode file for testing.
Please refer to \c "state.cpp" for the expected function signatures.
\note You should not change the names, the parameter types or the return types of these functions.
They are required to identify the state module functions in your module.

To test a custom state module with the example_df_cuda example of the MDL SDK, you can add this code snippet to the \c "Material_compiler::Material_compiler()" constructor in \c "example_cuda_shared.h" before calling #mi::neuraylib::IMdl_backend::create_link_unit():

\code
    FILE *file = fopen("user_modules\\state.bc", "rb");
    fseek(file, 0, SEEK_END);
    size_t size(ftell(file));
    fseek(file, 0, SEEK_SET);

    char *data = (char *) malloc(size);
    fread(data, 1, size, file);
    fclose(file);

    check_success(m_be_cuda_ptx->set_option_binary(
        "llvm_state_module", data, mi::Size(size)) == 0);
    free(data);
\endcode

To see, that the backend really uses your implementation, you can add a very visual modification to the state implementation at first, like scaling one axis of the texture coordinates in \c "state::texture_coordinate()" in \c "state.cpp":

\code
    // float3 texture_coordinate(int index) varying
    vfloat3 texture_coordinate(
        State_core const *state_context,
        Exception_state const *exc_state,
        int index)
    {
        User_state_material const *state = reinterpret_cast<User_state_material const *>(state_context);

        vfloat3 res = make_vector(state->text_coords[index]);
        res.x *= 5;
        return res;
    }
\endcode

After recompiling \c "state.bc" and restarting the example_df_cuda example, the texture on the sphere should look shrinked along the x-axis.

From here, you can start adapting the state module to your own renderer by replacing the \c "User_state_material" structure in \c "state.cpp" by the structure your renderer is using.
When calling the code generated by the MDL SDK, you then simply provide your own renderer state as (reinterpret-casted) state parameter.

\note This feature is still experimental.
If you notice any problems, please report them in our MDL SDK forum: <a href="https://devtalk.nvidia.com/default/board/253/">https://devtalk.nvidia.com/default/board/253/</a>.
</dd>
</dl>

\section example_user_state_module Example Source

To compile the state module, you require CUDA and a Clang from a LLVM 3.4.* release, which you can download from <a href="http://releases.llvm.org/download.html">http://releases.llvm.org/download.html</a>.

The recommended command line options for clang are:

\code
    clang -I<CUDA include path> -emit-llvm -c -O2 -ffast-math -target x86_64-pc-win32 state.cpp
\endcode

\note The target ensures that one fixed ABI (application binary interface) will be used, so the code generator knows how to process the functions.
Do not use a different target.

In case of errors reported by the MDL SDK code generator, it may be useful to look at the LLVM IR code of your module.
You can create an LLVM IR assembly text file \c "state.ll" with this command line:

\code
    clang -I<CUDA include path> -emit-llvm -S -O2 -ffast-math -target x86_64-pc-win32 state.cpp
\endcode


<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/user_modules/state.cpp</tt>

\include user_modules/state.cpp

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/user_modules/mdl_user_modules.h</tt>

\include user_modules/mdl_user_modules.h

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/user_modules/mdl_runtime.h</tt>

\include user_modules/mdl_runtime.h

<div align="right">
    [\link mi_neuray_example_derivatives Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
\if MDL_BIN_RELEASE
    [\link mi_neuray_example_distilling Next\endlink]
\else
    [\link mi_neuray_example_traversal Next\endlink]
\endif
</div>

*/
